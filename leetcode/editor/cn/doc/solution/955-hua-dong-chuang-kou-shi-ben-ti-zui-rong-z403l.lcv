各位题友大家好！ 今天是 **[@负雪明烛](/u/fuxuemingzhu/)** 坚持日更的第 **25** 天。今天力扣上的每日一题是「[995. K 连续位的最小翻转次数](https://leetcode-cn.com/problems/minimum-number-of-k-consecutive-bit-flips/)」。

# 解题思路

题目大意：每次翻转长度为 K 的子数组，求最少的翻转次数使数组中所有的 0 都更改为 1。如果不能实现，则返回 -1.

- 结论 1：后面区间的翻转，不会影响前面的元素。因此可以使用贪心策略，从左到右遍历，遇到每个 0 都把 它以及后面的 $K-1$ 个元素进行翻转。
- 结论 2：$A[i]$ 翻转偶数次的结果是 $A[i]$；翻转奇数次的结果是 `A[i] ^ 1`。

## 方法一：模拟翻转（超时）

一个直观的思路是，从左到右遍历一遍，遇到数字为 0，那么翻转以该数字为起始的 K 个数字。

代码如下：

* python

```python
class Solution(object):
    def minKBitFlips(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        N = len(A)
        res = 0
        for i in range(N - K + 1):
            if A[i] == 1:
                continue
            for j in range(K):
                A[i + j] ^= 1
            res += 1
        for i in range(N):
            if A[i] == 0:
                return -1
        return res
```

- 时间复杂度：$O(N * K + N)$，超时。
- 空间复杂度：$O(1)$。

## 方法二：滑动窗口

上面方法超时的主要原因是我们真实地进行了翻转。根据结论二，位置 $i$ 现在的状态，和它**被**前面 $K - 1$ 个元素翻转的次数（奇偶性）有关。

我们使用**队列**模拟**滑动窗口**，该滑动窗口的含义是前面 $K - 1$ 个元素中，以哪些位置起始的 子区间 进行了翻转。该滑动窗口从左向右滑动，如果当前位置 $i$ 需要翻转，则把该位置存储到队列中。遍历到新位置 $j (j < i + K)$ 时，队列中元素的个数代表了 $i$ **被**前面 $K - 1$ 个元素翻转的次数。

- 当 $A[i]$ 为 0，如果 $i$ 位置**被**翻转了偶数次，那么翻转后仍是 0，当前元素需要翻转；
- 当 $A[i]$ 为 1，如果 $i$ 位置**被**翻转了奇数次，那么翻转后变成 0，当前元素需要翻转。

综合上面两点，我们得到一个结论，如果 `len(que) % 2 == A[i]` 时，当前元素需要翻转。

当 $i +  K > N$ 时，说明需要翻转大小为 K 的子区间，但是后面剩余的元素不到 K 个了，所以返回 -1。

## 示例

下面的动图演示了题目给出的示例三 `A = [0,0,0,1,0,1,1,0], K = 3` 的情况：

![995.gif](https://pic.leetcode-cn.com/1613618561-CIjAhM-995.gif)

对应的 PPT 在这：

<![995.001.jpeg](https://pic.leetcode-cn.com/1613618577-qUXcRf-995.001.jpeg),![995.002.jpeg](https://pic.leetcode-cn.com/1613618577-KhMDek-995.002.jpeg),![995.003.jpeg](https://pic.leetcode-cn.com/1613618577-jiLTlV-995.003.jpeg),![995.004.jpeg](https://pic.leetcode-cn.com/1613618577-vFpcxT-995.004.jpeg),![995.005.jpeg](https://pic.leetcode-cn.com/1613618577-unxnwH-995.005.jpeg),![995.006.jpeg](https://pic.leetcode-cn.com/1613618577-TDTaEY-995.006.jpeg),![995.007.jpeg](https://pic.leetcode-cn.com/1613618577-qbFrUa-995.007.jpeg),![995.008.jpeg](https://pic.leetcode-cn.com/1613618577-XwMDJe-995.008.jpeg),![995.009.jpeg](https://pic.leetcode-cn.com/1613618577-zTTdyF-995.009.jpeg),![995.010.jpeg](https://pic.leetcode-cn.com/1613618577-mUFuOT-995.010.jpeg),![995.011.jpeg](https://pic.leetcode-cn.com/1613618577-omIkJX-995.011.jpeg),![995.012.jpeg](https://pic.leetcode-cn.com/1613618577-hjunVg-995.012.jpeg),![995.013.jpeg](https://pic.leetcode-cn.com/1613618577-TYcRyP-995.013.jpeg),![995.014.jpeg](https://pic.leetcode-cn.com/1613618577-cYNUEl-995.014.jpeg),![995.015.jpeg](https://pic.leetcode-cn.com/1613618577-SUrqhe-995.015.jpeg),![995.016.jpeg](https://pic.leetcode-cn.com/1613618577-GvkTeW-995.016.jpeg),![995.017.jpeg](https://pic.leetcode-cn.com/1613618577-KMFAwj-995.017.jpeg),![995.018.jpeg](https://pic.leetcode-cn.com/1613618577-pvmhCn-995.018.jpeg),![995.019.jpeg](https://pic.leetcode-cn.com/1613618577-UVJTdx-995.019.jpeg),![995.020.jpeg](https://pic.leetcode-cn.com/1613618577-XwNtzN-995.020.jpeg)>

## 代码

Python ，Java， C++ 三种代码如下：

* []

```Python
class Solution(object):
    def minKBitFlips(self, A, K):
        """
        :type A: List[int]
        :type K: int
        :rtype: int
        """
        N = len(A)
        que = collections.deque()
        res = 0
        for i in range(N):
            if que and i >= que[0] + K:
                que.popleft()
            if len(que) % 2 == A[i]:
                if i +  K > N: return -1
                que.append(i)
                res += 1
        return res
```

* []

```Java
class Solution {
    public int minKBitFlips(int[] A, int K) {
        int res = 0;
        Deque<Integer> que = new LinkedList<>();
        for (int i = 0; i < A.length; i++) {
            if (que.size() > 0 && i > que.peek() + K - 1) {
                que.removeFirst();
            }
            //1.本来是1，翻转奇数次变为0，所以需要再次翻转，放入队列
            //2.本来是0，翻转偶数次还是0，所以需要再次翻转，放入队列
            if (que.size() % 2 == A[i]) {
                if (i + K > A.length) return -1;
                que.add(i);
                res += 1;
            }
        }
        return res;
    }
}
```

* []

```C++
class Solution {
public:
    int minKBitFlips(vector<int>& A, int K) {
        int N = A.size();
        queue<int> que;
        int res = 0;
        for (int i = 0; i < N; ++i) {
            if (!que.empty() && i >= que.front() + K) {
                que.pop();
            }
            if (que.size() % 2 == A[i]) {
                if (i + K > N) {
                    return -1;
                }
                que.push(i);
                res ++;
            }
        }
        return res;
    }
};
```

- 时间复杂度：$O(N)$。
- 空间复杂度：$O(K)$。

# 刷题心得

今天的题目理解着比较困难，主要是语言很难说明白，其实理解之后没有那么难。

---

OK，以上就是 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 写的今天题解的全部内容了，如果你觉得有帮助的话，**求赞、求关注、求收藏**。如果有疑问的话，请在下面评论，我会及时解答。

**关注我**，你将不会错过我的精彩动画题解、模拟面试、组队刷题活动，进入主页 [@负雪明烛](https://leetcode-cn.com/u/fuxuemingzhu/) 右侧有刷题组织，从此刷题不再孤单。
祝大家牛年大吉！AC 多多，Offer 多多！我们明天再见！
