# 编写一个程序，通过填充空格来解决数独问题。 
# 
#  数独的解法需 遵循如下规则： 
# 
#  
#  数字 1-9 在每一行只能出现一次。 
#  数字 1-9 在每一列只能出现一次。 
#  数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图） 
#  
# 
#  数独部分空格内已填入了数字，空白格用 '.' 表示。 
# 
#  
# 
#  
#  
#  
#  示例： 
# 
#  
# 输入：board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".
# ",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".
# ","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6
# "],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[
# ".",".",".",".","8",".",".","7","9"]]
# 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8
# "],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],[
# "4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9",
# "6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4",
# "5","2","8","6","1","7","9"]]
# 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：
# 
# 
#  
# 
#  
# 
#  提示： 
# 
#  
#  board.length == 9 
#  board[i].length == 9 
#  board[i][j] 是一位数字或者 '.' 
#  题目数据 保证 输入数独仅有一个解 
#  
#  
#  
#  
#  Related Topics 数组 回溯 矩阵 👍 1152 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def solveSudoku(self, board) -> None:
        def dfs(board, i, j):
            m, n = 9, 9
            if j == n:  # 穷举到最后一列则换下一行重新开始
                dfs(board, i + 1, 0)
                return

            if i == m:
                # 找到一个可行解，触发bad case
                return True

            if board[i][j] != '.':
                # 如果有预设数字，不⽤我们穷举
                return dfs(board, i, j + 1)

            for ch in range(1, 10):
                ch = str(ch)
                # 遇到不合法的数字，就跳过
                if (not isValid(board, i, j, ch)):
                    continue
                board[i][j] = ch
                if dfs(board, i, j + 1):
                    return True
                board[i][j] = '.'
            return False  # 穷举完 1~9，依然没有找到可⾏解，此路不通

        # 判断 board[i][j]是否可以填入n
        def isValid(board, r, c, n):
            for i in range(3):
                # 判断行是否重复
                if board[r][i] == n:
                    return False
                # 判断列是否重复
                if board[i][c] == n:
                    return False
                # 判断3*3方框是否重复
                print((r // 3) * 3 + i // 3, (c // 3) * 3 + i % 3)
                if board[(r // 3) * 3 + i // 3][(c // 3) * 3 + i % 3] == n:
                    return False
            return True

        board1 = [["5", "3", "."],
                  ["6", ".", "."],
                  [".", "9", "8"]]
        res = isValid(board1, 1, 1, '8')
        print(res)
# leetcode submit region end(Prohibit modification and deletion)


if __name__ == '__main__':
    board = [["5", "3", ".", ".", "7", ".", ".", ".", "."],
             ["6", ".", ".", "1", "9", "5", ".", ".", "."],
             [".", "9", "8", ".", ".", ".", ".", "6", "."],
             ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
             ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
             ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
             [".", "6", ".", ".", ".", ".", "2", "8", "."],
             [".", ".", ".", "4", "1", "9", ".", ".", "5"],
             [".", ".", ".", ".", "8", ".", ".", "7", "9"]]

    board1 = [["5", "3", "."],
              ["6", ".", "."],
              [".", "9", "8"]]
    S = Solution()
    print(S.solveSudoku(board))
